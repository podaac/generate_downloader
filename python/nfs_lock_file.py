#  Copyright 2017, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

# Subroutine to lock a file using the Python flufl module.
#
# This function is meant to work on NFS mounted file system.
#
# If the lock cannot be acquired after the default 10 seconds, it will exit with the variable o_the_lock undefined.
# The callee will check for None-ness on the returned variable.

import datetime
import os
import re
import traceback
import time

from time import strftime
from get_local_time import get_local_pdt_time;

# Module for locking files.
from flufl.lock import Lock

def nfs_lock_file(i_semaphore_name):
    # The name of the semaphore should ends with .lck and a full pathname.

    routine_name = "nfs_lock_file"; 
    debug_module = "nfs_lock_file:"; 
    debug_mode   = 0;

    if (os.getenv('CRAWLER_SEARCH_DEBUG_FLAG','') == "true"):
        debug_mode   = 1;

    o_the_lock = None;

    if (debug_mode):
        print(now_ascii() + debug_module + "DEBUG Attempting to lock file " + i_semaphore_name);

    # Do a sanity check to see if the semaphore ends with ".lck".  If not, return the undefined o_the_lock.

    if (not i_semaphore_name.endswith(".lck")):
        print(debug_module + "ERROR:i_semaphore_name does not ends with .lck " + i_semaphore_name);
        # Return an undefined variable.
        return(o_the_lock);
    else:
        if (debug_mode):
            print(now_ascii() + debug_module + "DEBUG i_semaphore_name " + i_semaphore_name + " ends with .lck");

    # The default life time of the lock is 15 seconds.   Get it from the user if MAX_LOCK_LIFETIME is specified and is greater than 15.

    MAX_LOCK_LIFETIME = 15;
    new_life_duration = MAX_LOCK_LIFETIME;

    if (os.getenv('CRAWLER_SEARCH_MAX_LOCK_LIFETIME','') != ""):
        # Do a sanity check to make sure it is more than 1.
        if (int(os.getenv('CRAWLER_SEARCH_MAX_LOCK_LIFETIME','')) >= MAX_LOCK_LIFETIME):
            new_life_duration = int(os.getenv('CRAWLER_SEARCH_MAX_LOCK_LIFETIME',''));
            if (debug_mode):
                print(now_ascii() + debug_module + "new_life_duration " + str(new_life_duration));
        else:
            print(debug_module + "Must set CRAWLER_SEARCH_MAX_LOCK_LIFETIME environment variable to value greater than or equal to " + str(MAX_LOCK_LIFETIME) + ".  Current value " + os.getenv('CRAWLER_SEARCH_MAX_LOCK_LIFETIME',''));
            exit(1);
    
    lock_file_name = i_semaphore_name + ".NFSlock";
    try :
        o_the_lock      = Lock(lock_file_name);
        # The life time of a lock is set here.  If we wish to increase its life, we check to see if the user has it set.
        if (debug_mode):
            print(now_ascii() + debug_module + "o_the_lock.lifetime",o_the_lock.lifetime);   # o_the_lock.lifetime 0:00:15
        if (new_life_duration > MAX_LOCK_LIFETIME):
            o_the_lock.lifetime = datetime.timedelta(seconds=new_life_duration);
            if (debug_mode):
                print(now_ascii() + debug_module + "o_the_lock.lifetime",o_the_lock.lifetime);   # o_the_lock.lifetime 0:01:05 if new_life_duration is 65.

        if (debug_mode):
            print(now_ascii() + "waiting to acquire the lock on " + lock_file_name + " ..."); 
        time_wait_start = time.time();
        o_the_lock.lock();
        time_wait_stop = time.time();
        time_wait_duration = time_wait_stop - time_wait_start; 
        if (debug_mode):
            print(now_ascii() + "o_the_lock.is_locked",o_the_lock.is_locked,"time_wait_duration",time_wait_duration);
    except: # catch *all* exceptions
        print(debug_module + "ERROR: Encounter error with locking file " + i_semaphore_name)
        traceback.print_exc()
        return(o_the_lock);

    # If the locking was successful, a file with the name .NFSLock appended to the variable i_semaphore_name will exist
    # until it is unlocked or the process owning the file exits.  The variable o_the_lock will be defined.

    if (o_the_lock is not None):
        if (debug_mode):
            print(now_ascii() + debug_module + "DEBUG: File " + i_semaphore_name + " is now locked. Lock acquired");
    else:
        print(now_ascii() + debug_module + "DEBUG: File " + i_semaphore_name + " is still locked by another process.  Lock not acquired");
 
    return(o_the_lock);


def now_ascii():

    localtime = get_local_pdt_time();
    now_is = strftime("%a %b %d %H:%M:%S %Y",localtime) + " ";
    return(now_is);

import subprocess;
from nfs_unlock_file import nfs_unlock_file;

if __name__ == '__main__':
    i_semaphore_name = "/data/dev/scratch/qchau/test.lck";
    debug_module = "nfs_lock_file:";
    print(debug_module + "touch " + i_semaphore_name);
    subprocess.call(["touch",i_semaphore_name]);
    o_the_lock = nfs_lock_file(i_semaphore_name); 
    print(debug_module + "pre_with:o_the_lock", o_the_lock)
    print(debug_module + "sleep 5 seconds");
    time.sleep(5);
    if (o_the_lock.is_locked):
       print(debug_module + "INFO:I got the lock");
       # Now, unlock it.
       nfs_unlock_file(o_the_lock,i_semaphore_name);
    else: 
       print(debug_module + "WARN:I got no lock");
    print(debug_module + "post_with:o_the_lock", o_the_lock)
