#  Copyright 2017, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

# Function to wrap the nfs_lock_file() function by providing a call to nfs_lock_file(), debug printing and checking of the lock
# after the attempt.  It also allows a way to loop the number of attempts.

import os
import time

import subprocess;
from   subprocess import call;

from nfs_lock_file import nfs_lock_file;
from log_this import log_this;

#------------------------------------------------------------------------------------------------------------------------
def nfs_lock_file_wrapper(i_filename_to_lock,
                          i_max_attempts):

    # Check to see if the user provided the number of attempts.  If not, assume just once.
    debug_module = "nfs_lock_file_wrapper:";
    debug_mode   = 0;

    if (os.getenv('CRAWLER_SEARCH_DEBUG_FLAG','') == "true"):
        debug_mode   = 1;
    if (os.getenv('LOCK_FILE_DEBUG_FLAG','') == "true"):
        debug_mode   = 1;

    o_the_lock = None; 
    o_wrapper_status = 0;

    MAX_ATTEMPTS_IN_FILE_LOCK = 1;

    if (i_max_attempts is not None):
        MAX_ATTEMPTS_IN_FILE_LOCK = i_max_attempts;

    # Also check the environment settings to see if it has been set to collect the number of attempts.

    if (os.getenv('CRAWLER_SEARCH_MAX_FILE_LOCK_ATTEMPTS','') != ''):
        # Do a sanity check to make sure it is more than 1.
        if (int(os.getenv('CRAWLER_SEARCH_MAX_FILE_LOCK_ATTEMPTS','')) >= 1):
            MAX_ATTEMPTS_IN_FILE_LOCK = int(os.getenv('CRAWLER_SEARCH_MAX_FILE_LOCK_ATTEMPTS',''));
            if (debug_mode):
                print(now_ascii() + debug_module + "Reset MAX_ATTEMPTS_IN_FILE_LOCK to " + str(MAX_ATTEMPTS_IN_FILE_LOCK));
        else:
            print("Must set CRAWLER_SEARCH_MAX_FILE_LOCK_ATTEMPTS environment variable to value greater than or equal to 1.  Current value " + os.getenv('CRAWLER_SEARCH_MAX_FILE_LOCK_ATTEMPTS',''));
            exit(0);

    o_wrapper_status = 1; # A value of 1 means the lock has been acquired and 0 means not.

    semaphore_name = i_filename_to_lock + ".lck";
    time_start_waiting = time.time();

    num_attempts = 1;
    lock_acquired_flag = 0;

    # Loop until acquired the lock or run out of attempts.

    while ((not lock_acquired_flag) and (num_attempts <= MAX_ATTEMPTS_IN_FILE_LOCK)):

        o_the_lock = nfs_lock_file(semaphore_name);

        if (debug_mode):
            time_end_waiting = time.time();
            time_waited = time_end_waiting - time_start_waiting;
            if (debug_mode):
                print(now_ascii() + debug_module + "i_filename_to_lock " + i_filename_to_lock);

        if (o_the_lock is None):
            log_this("ERROR",debug_module,"LOCK_NOT_ACQUIRED_ON_FILE " + i_filename_to_lock + " ON_ATTEMPT " + str(num_attempts));
        else:
            # Now that we got the lock object, we check to see if it is indeed locked with the attributre is_locked.
            if (o_the_lock.is_locked):
                lock_acquired_flag = 1;
        num_attempts = num_attempts + 1;

    o_wrapper_status = lock_acquired_flag;

    return(o_wrapper_status,o_the_lock);

from time import strftime
from get_local_time import get_local_pdt_time;

def now_ascii():

    localtime = get_local_pdt_time();
    now_is = strftime("%a %b %d %H:%M:%S %Y",localtime) + " ";
    return(now_is);

if __name__ == '__main__':
    i_filename_to_lock = "/data/dev/scratch/qchau/test1";
    debug_module = "nfs_lock_file_wrapper:";
    default_time_sleep = 5;

    # If developer set the sleep time, we reset it.
    if ((os.getenv('CRAWLER_SEARCH_DEVELOPER_SLEEP_TIME','') != '') and
        (int(os.getenv('CRAWLER_SEARCH_DEVELOPER_SLEEP_TIME','')) >= 1)):
        default_time_sleep = int(os.getenv('CRAWLER_SEARCH_DEVELOPER_SLEEP_TIME',''));

    # Create the file is it does not exist.
    if (not os.path.isfile(i_filename_to_lock)):
        print(now_ascii() + debug_module + "touch " + i_filename_to_lock);
        subprocess.call(["touch",i_filename_to_lock]);
    i_max_attempts = 1;
    (o_wrapper_status,o_the_lock) = nfs_lock_file_wrapper(i_filename_to_lock,i_max_attempts);
    print(now_ascii() + debug_module + "pre_with:o_the_lock", o_the_lock)
    if (o_wrapper_status):
       print(now_ascii() + debug_module + "I got the lock");
       print(now_ascii() + "sleep " + str(default_time_sleep) + " seconds");
       time.sleep(default_time_sleep);
       o_the_lock.unlock();
    else:
       print(now_ascii() + debug_module + "I got no lock");
    print(now_ascii() + debug_module + "post_with:o_the_lock", o_the_lock)
