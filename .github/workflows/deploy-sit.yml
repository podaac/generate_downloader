# Main build pipeline that verifies, builds, and deploys the software
name: Build and Deploy
# Events that trigger the workflow
on:
  # Trigger based on push to all branches
  push:
    branches:
      - 'development'
    tags-ignore:
      - '*'
  # Run workflow manually from the Actions tab
  workflow_dispatch:

# Environment variables
env:
  TARGET_ENV: 'SIT'
  PREFIX_ENV: 'service-generate-sit'
  APP_NAME_ENV: 'downloader'

jobs:
  build:
    name: Build and Deploy
    # The type of runner that the job will run on
    runs-on: ubuntu-latest    
    
    steps:
      # Check out GitHub repo
      - uses: actions/checkout@v3

      # Configure credentials 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_SERVICES_SIT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_SERVICES_SIT }}
          aws-region: us-west-2

      # Login and define registry, repository, and tag names
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Define ECR registry, repository, and image tag names
        run : |
          echo "REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "REPOSITORY=${PREFIX_ENV}-${APP_NAME_ENV}" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      # Create ECR repository (if it does not exist)
      - name: Create AWS ECR Repository
        run: deploy/deploy-ecr.sh $REGISTRY $REPOSITORY

      # Build and push AWS Batch job container
      - name: Build and Push to AWS ECR
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.3.7
      
      - name: Define TF_VAR values
        run: |
          echo "TF_VAR_environment=$TARGET_ENV" >> $GITHUB_ENV
          echo "TF_VAR_prefix=$PREFIX_ENV" >> $GITHUB_ENV
          echo "TF_VAR_edl_username=${{ secrets.EDL_USERNAME }}" >> $GITHUB_ENV
          echo "TF_VAR_edl_password=${{ secrets.EDL_PASSWORD }}" >> $GITHUB_ENV

      - name: Initialize Terraform
        working-directory: terraform/
        run: |
          terraform init -reconfigure \
              -backend-config="bucket=${PREFIX_ENV}-tf-state" \
              -backend-config="key=${APP_NAME_ENV}.tfstate" \
              -backend-config="region=${AWS_DEFAULT_REGION}"

      - name: Validate Terraform
        working-directory: terraform/
        run: terraform validate -no-color

      # Deploy AWS infrastructure
      - name: Deploy Terraform
        working-directory: terraform/
        run: terraform apply -auto-approve