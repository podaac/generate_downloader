#  Copyright 2017, by the California Institute of Technology.  ALL RIGHTS #  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

# Function to download a file from OBPG and move to its final destination file.
#
# A file name to download is in the form of:
#
#     http://oceandata.sci.gsfc.nasa.gov/cgi/getfile/A2013048142500.L2_LAC_OC.bz2
#
# The wget command will be used to perform the download.
#
# If the URI is just a file name, this script will preceed the URI with the string "http://oceandata.sci.gsfc.nasa.gov/cgi/getfile/" to pass along
# to the wget command.
#
# If the file contains comma or space separated values, this script can support it too.
# If the checksum is provided, it should be separated by a space or comma.  The checksum type is assumed to be SHA-1.
#
# The number of tries will be 45 times due to network hiccups and such.
# Based on the data source (the first character of the file), the output directory will either be 
#
#    MODIS_AQUA_L2_SST_OBPG
#    MODIS_TERRA_L2_SST_OBPG
#
# so the MODIS Level 2 Uncompressor (related to the MODIS Level 2 Combiner) can find them later.
#------------------------------------------------------------------------------------------------

import os
import time
import sys
from mkdir_with_error_handling import mkdir_with_error_handling

from log_this import log_this;
from perform_download_only import perform_download_only;
from perform_checksum_check_and_move import perform_checksum_check_and_move;

#------------------------------------------------------------------------------------------------------------------------
def perform_download_and_move(i_num_files_downloaded,
                              i_num_sst_sst4_files,
                              i_full_pathname_to_download,
                              i_temporary_location_of_downloaded_file,
                              i_final_location_of_downloaded_file,
                              i_time_spent_in_downloading,
                              i_perform_checksum_flag,
                              i_checksum_value,
                              i_test_run_flag):

    # Local variables.

    time_start_download_and_move = time.time();
    checksum_status = 1;  # Start out assume the checksum has been checked and is good.
    function_name = "perform_download_and_move";
    debug_module  = "perform_download_and_move:";
    debug_mode    = 0;

    if (os.getenv('CRAWLER_SEARCH_DEBUG_FLAG','') == 'true'):
        debug_mode = 1;

  # Output variable.

    o_download_and_move_status  = 0;  # Start out assuming the status is successful.
    o_time_spent_in_downloading_and_move = 0; 

    if (debug_mode):
        print(debug_module + "i_num_files_downloaded",i_num_files_downloaded);
        print(debug_module + "i_num_sst_sst4_files",i_num_sst_sst4_files);
        print(debug_module + "i_full_pathname_to_download",i_full_pathname_to_download);
        print(debug_module + "i_temporary_location_of_downloaded_file",i_temporary_location_of_downloaded_file);
        print(debug_module + "i_final_location_of_downloaded_file",i_final_location_of_downloaded_file);
        print(debug_module + "i_time_spent_in_downloading",i_time_spent_in_downloading);
        print(debug_module + "i_perform_checksum_flag",i_perform_checksum_flag);
        print(debug_module + "i_checksum_value",i_checksum_value);
        print(debug_module + "i_test_run_flag",i_test_run_flag);

    # Perform the download of the remote file.

    (download_status, o_time_spent_in_downloading_and_move) = perform_download_only("call_direct",
                                                                                    i_num_files_downloaded,
                                                                                    i_num_sst_sst4_files,
                                                                                    i_full_pathname_to_download,
                                                                                    i_temporary_location_of_downloaded_file,
                                                                                    i_final_location_of_downloaded_file,
                                                                                    i_time_spent_in_downloading,
                                                                                    i_perform_checksum_flag,
                                                                                    i_test_run_flag);
                                                                                    
    if (debug_mode):
        print(debug_module + "download_status            ", download_status);
        print(debug_module + "o_download_and_move_status ", o_download_and_move_status);

    # If the download was successful, move the file from temporary location to final destination and perform the checksum.
    # A value of 1 if successful or 0 if failed.

    if (download_status == 1):
        time_start_move = time.time();
        # Get just the file name without the directory.
        file_name_to_get_checksum_for = os.path.basename(i_final_location_of_downloaded_file);
        directory_only                = os.path.dirname (i_final_location_of_downloaded_file);
        o_download_and_move_status = 0;

        if (debug_mode):
            print(debug_module + "i_final_location_of_downloaded_file",i_final_location_of_downloaded_file); 
            print(debug_module + "i_temporary_location_of_downloaded_file",i_temporary_location_of_downloaded_file); 
            print(debug_module + "i_perform_checksum_flag",i_perform_checksum_flag); 
            print(debug_module + "file_name_to_get_checksum_for",file_name_to_get_checksum_for); 
            print(debug_module + "i_checksum_value",i_checksum_value); 

        # Determine final location based on whether file is quicklook or refined.
        p_flag = settings.g_gdjm.is_file_quicklook_or_refined(f"{i_temporary_location_of_downloaded_file}/{file_name_to_get_checksum_for}")
        i_final_location_of_downloaded_file = f"{directory_only}_{p_flag}/{file_name_to_get_checksum_for}"
        o_download_and_move_status = mkdir_with_error_handling(os.path.dirname(i_final_location_of_downloaded_file))

        if (o_download_and_move_status):   # Status equals 1
            o_download_and_move_status = perform_checksum_check_and_move(i_final_location_of_downloaded_file,
                                                                        i_temporary_location_of_downloaded_file,
                                                                        i_perform_checksum_flag,
                                                                        file_name_to_get_checksum_for,
                                                                        i_checksum_value);
            time_end_move = time.time();
            time_spent_in_move = time_end_move - time_start_move;
            if (debug_mode):
                print(debug_module + "time_spent_in_move ", time_spent_in_move," FILE_MOVE_FROM ", i_temporary_location_of_downloaded_file, " FILE_MOVE_TO ", i_final_location_of_downloaded_file);
        
    else:
        o_download_and_move_status = 0;
    
    # If this is a test run, we simulate an error by setting o_download_and_move_status to 1. 
    if (i_test_run_flag == "true"):
        o_download_and_move_status = 1;

    # Check for how long it took to do the download.

    time_end_download_and_move = time.time();
    o_time_spent_in_downloading_and_move = i_time_spent_in_downloading + (time_end_download_and_move - time_start_download_and_move);

    return(o_download_and_move_status,o_time_spent_in_downloading_and_move,i_final_location_of_downloaded_file);

import settings

if __name__ == "__main__":
    debug_module = "perform_download_and_move:";
    debug_mode   = 1;

    i_num_files_downloaded = 0
    i_num_sst_sst4_files  =1
    i_full_pathname_to_download = "https://oceandata.sci.gsfc.nasa.gov/cgi/getfile/Q2015158.L3b_DAY_EVQLA_V4.1.0.main.bz2";
    i_temporary_location_of_downloaded_file = "/data/dev/scratch/qchau/IO/data/AQUARIUS_L2_OBPG/.hidden/Q2015158.L3b_DAY_EVQLA_V4.1.0.main.bz2";
    i_final_location_of_downloaded_file     = "/data/dev/scratch/qchau/IO/data/AQUARIUS_L2_OBPG/Q2015158.L3b_DAY_EVQLA_V4.1.0.main.bz2";
    i_time_spent_in_downloading             = 0.0
    i_perform_checksum_flag                 = "no"
    i_checksum_value                        = None;
    i_test_run_flag                         = None;

    # Because we are running this as main, we have to explicitly call the init() function.
    settings.init();

    (o_download_and_move_status,o_time_spent_in_downloading_and_move) = perform_download_and_move(i_num_files_downloaded,
                                                                                                  i_num_sst_sst4_files,
                                                                                                  i_full_pathname_to_download,
                                                                                                  i_temporary_location_of_downloaded_file,
                                                                                                  i_final_location_of_downloaded_file,
                                                                                                  i_time_spent_in_downloading,
                                                                                                  i_perform_checksum_flag,
                                                                                                  i_checksum_value,
                                                                                                  i_test_run_flag);

    print("");
    print("i_full_pathname_to_download",i_full_pathname_to_download);
    print("o_download_and_move_status",o_download_and_move_status);
    print("o_time_spent_in_downloading_and_move",o_time_spent_in_downloading_and_move);
    print("");

    # Do the 2nd run with i_perform_checksum_flag to "yes" and i_checksum_value as empty string.

    i_perform_checksum_flag                 = "yes"
    i_checksum_value                        = "";
    i_time_spent_in_downloading = o_time_spent_in_downloading_and_move;

    (o_download_and_move_status,o_time_spent_in_downloading_and_move) = perform_download_and_move(i_num_files_downloaded,
                                                                                                  i_num_sst_sst4_files,
                                                                                                  i_full_pathname_to_download,
                                                                                                  i_temporary_location_of_downloaded_file,
                                                                                                  i_final_location_of_downloaded_file,
                                                                                                  i_time_spent_in_downloading,
                                                                                                  i_perform_checksum_flag,
                                                                                                  i_checksum_value,
                                                                                                  i_test_run_flag);


    print("");
    print("i_full_pathname_to_download",i_full_pathname_to_download);
    print("o_download_and_move_status",o_download_and_move_status);
    print("o_time_spent_in_downloading_and_move",o_time_spent_in_downloading_and_move);
    print("");
