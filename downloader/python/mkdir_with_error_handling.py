#  Copyright 2017, by the California Institute of Technology.  ALL RIGHTS
#  RESERVED. United States Government Sponsorship acknowledged. Any commercial
#  use must be negotiated with the Office of Technology Transfer at the
#  California Institute of Technology.
#
# $Id$
# DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

import os
import time

from time import strftime, gmtime

from log_this import log_this;
from raise_sigevent_wrapper import raise_sigevent_wrapper;

#------------------------------------------------------------------------------------------------------------------------
# Function perform a mkdir() function on the given directory name and returns 1 if successful and 0 if failed.
# A sigevent will be raised if the directory cannot be created. 

def mkdir_with_error_handling(i_directory_to_create):

    g_routine_name = "mkdir_with_error_handling";
    debug_module   = "mkdir_with_error_handling:";
    debug_mode     = 0;
    if (os.getenv('CRAWLER_SEARCH_DEBUG_FLAG','') == "true"):
        debug_mode   = 1;

    o_mkdir_status = 1;

    # Do a sanity check to see if the destination exist already exist and is directory.

    if (os.path.isdir(i_directory_to_create)):
        # Do nothing, this is good.
        log_this("INFO",g_routine_name,"MKDIR_SUCCESS_DIRECTORY_ALREADY_EXISTS " + i_directory_to_create);
        return(o_mkdir_status);

    # Do a sanity check to see if the destination exist already exist and is a file.
    # If it is already a file, we can't create a directory over it.

    if (os.path.exists(i_directory_to_create) and (os.path.isfile(i_directory_to_create))):
        # Do nothing, this is bad.  We don't want to create a directory over an existing file.
        log_this("ERROR",g_routine_name,"MKDIR_FAILED_NAMED_DIRECTORY_ALREADY_EXISTS_AND_IS_A_FILE " + i_directory_to_create);
        o_mkdir_status = 0;
        return(o_mkdir_status); 

    # The directory does not yet exist, create it.

    status_mkdir = 1;
    try:
        os.umask(000)
        os.mkdir(i_directory_to_create, 0o777)    # NET edit. (Allow removal of directory on disk)
    except FileExistsError:
        log_this("DEBUG",g_routine_name,"DIRECTORY ALREADY EXISTS " + i_directory_to_create);
    except OSError:
        log_this("ERROR",g_routine_name,"CANNOT_CREATE_DIRECTORY "  + i_directory_to_create);
        status_mkdir = 0;

    if (debug_mode):
        log_this("DEBUG",g_routine_name,"STATUS_MKDIR [" + str(status_mkdir) + "]");

    # The mkdir function returns true if successful and false if failed.
    if (status_mkdir):
        # Do nothing, this is good.
        log_this("INFO",g_routine_name,"MKDIR_SUCCESS " + i_directory_to_create);
    else:
        o_mkdir_status = 0;
        if (debug_mode):
            print(debug_module + "raise_sigevent");

        sigevent_type     = 'ERROR'
        sigevent_category = 'GENERATE'
        sigevent_description = debug_module + "MKDIR_FAILED " + i_directory_to_create;
        sigevent_data        = "";
        sigevent_debug_flag  = None;

        print(debug_module + sigevent_description);

        raise_sigevent_wrapper(sigevent_type,
                               sigevent_category,
                               sigevent_description,
                               sigevent_data,
                               sigevent_debug_flag);

    return(o_mkdir_status);

if __name__ == '__main__':
    i_directory_to_create = "dummy_directory";
    o_mkdir_status =  mkdir_with_error_handling(i_directory_to_create);
    print("i_directory_to_create",i_directory_to_create,"o_mkdir_status",o_mkdir_status);

    i_directory_to_create = "/data/dev/scratch/temp1/temp2";
    o_mkdir_status =  mkdir_with_error_handling(i_directory_to_create);
    print("i_directory_to_create",i_directory_to_create,"o_mkdir_status",o_mkdir_status);
